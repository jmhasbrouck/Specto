const electron = require('electron')
const {ipcMain, app, BrowserWindow} = electron
const path = require('path')
const url = require('url')
const dialog = electron.dialog

let splashScreen
let win

var filename;
function createWindow () {
    const {width, height} = electron.screen.getPrimaryDisplay().workAreaSize
    win = new BrowserWindow({width: width, height: height, show: false})
    win.loadURL(url.format({
	pathname: path.join(__dirname, 'index.html'),
	protocol: 'file:',
	slashes: true
    }))
    win
    win.on('closed', () => {
	// Dereference the window object, usually you would store windows in an array if your app supports multi windows, this is the time when you should delete the corresponding element.
	win = null
    })
}
function createSplash() {
    createWindow();
    const {width, height} = electron.screen.getPrimaryDisplay().workAreaSize/2
    win2 = new BrowserWindow({width:width, height:height, frame:false})
    win2.loadURL(url.format({
	pathname: path.join(__dirname, 'splash.html'),
	protocol: 'file:',
	slashes: true
    }))
    win2.on('closed', () => {
	win2 = null
    })   
}

// inter-process communication
ipcMain.once('messageFromSplash', (event, arg) => {
    filename = arg[0];
    win.show();
    event.sender.send('exitSplash', null);
    win.webContents.send('replyFromMain', filename);
    event.returnValue = true;
});

app.on('ready', createSplash);

// Quit when all windows are closed.
app.on('window-all-closed', () => {
  //darwin == MacOS, and on mac it's common for programs to be quit using system tray
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
